{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","newt","split","join","length","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7cc3f191.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n   <strong>{capitalize(props.alert.type)}</strong>{props.alert.msg}\r\n  \r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\"  href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n              </li>\r\n\r\n            </ul>\r\n            {/*<form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n    </form>*/}\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav> \r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title:PropTypes.string, aboutText:PropTypes.string\r\n\r\n}\r\n\r\n// defalut props\r\n// Navbar.defaultProps = {\r\n//   title: 'Set title here',\r\n//   aboutText: 'About text here'\r\n// };\r\n","// props and State concept\r\nimport React, {useState} from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        \r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to upperCase\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        \r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to lowerCase\", \"success\");\r\n    }\r\n    \r\n    const handleClearClick = ()=>{\r\n        \r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\" Text Cleared\", \"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\" Copy to Clipbord\", \"success\");\r\n        \r\n\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        var newt = text.split(/[ ]+/);\r\n        setText(newt.join(\" \"))\r\n        props.showAlert(\" Extra spaces removed\", \"success\");\r\n    }\r\n    \r\n    const handleOnChange = (event)=>{\r\n      \r\n      // handle event \r\n      setText(event.target.value);    \r\n    };\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n           <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                \r\n                <textarea className=\"form-control\" \r\n                value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'gray':'white', color:props.mode==='dark'?'white':'#042743'}} id=\"mybox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to LowerCase </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length}Minute Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:'Enter something in the textbox above to preview it here'}</p>\r\n        </div>\r\n        </>\r\n            )\r\n}\r\n","import React, { useState} from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\" Dark mode has been enabled\", \"success\")\n    }else{\n    setMode('light')\n    document.body.style.backgroundColor = 'white';\n    showAlert(\" Light mode has been enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n  <div className=\"container my-3\">\n\n   <TextForm showAlert={showAlert} heading=\"Enter The text to analyize below\" mode={mode}  />\n { /*<About/>*/}\n    </div>\n     \n\n    </>\n\n  );  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}